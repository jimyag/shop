// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package model

import (
	"context"
	"database/sql"
	"time"
)

const createCart = `-- name: CreateCart :one
INSERT INTO "shopping_cart"(user_id, goods_id, nums, checked)
VALUES ($1, $2, $3, $4)
returning id, created_at, updated_at, deleted_at, user_id, goods_id, nums, checked
`

type CreateCartParams struct {
	UserID  int32 `json:"user_id"`
	GoodsID int32 `json:"goods_id"`
	Nums    int32 `json:"nums"`
	Checked bool  `json:"checked"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, createCart,
		arg.UserID,
		arg.GoodsID,
		arg.Nums,
		arg.Checked,
	)
	var i ShoppingCart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.GoodsID,
		&i.Nums,
		&i.Checked,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order_info"(user_id,
                         order_id,
                         status,
                         order_mount,
                         address,
                         signer_name,
                         signer_mobile,
                         post)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, created_at, updated_at, deleted_at, user_id, order_id, pay_type, status, trade_id, order_mount, pay_time, address, signer_name, signer_mobile, post
`

type CreateOrderParams struct {
	UserID       int32           `json:"user_id"`
	OrderID      int32           `json:"order_id"`
	Status       int64           `json:"status"`
	OrderMount   sql.NullFloat64 `json:"order_mount"`
	Address      string          `json:"address"`
	SignerName   string          `json:"signer_name"`
	SignerMobile string          `json:"signer_mobile"`
	Post         string          `json:"post"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (OrderInfo, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.OrderID,
		arg.Status,
		arg.OrderMount,
		arg.Address,
		arg.SignerName,
		arg.SignerMobile,
		arg.Post,
	)
	var i OrderInfo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.OrderID,
		&i.PayType,
		&i.Status,
		&i.TradeID,
		&i.OrderMount,
		&i.PayTime,
		&i.Address,
		&i.SignerName,
		&i.SignerMobile,
		&i.Post,
	)
	return i, err
}

const createOrderGoods = `-- name: CreateOrderGoods :one
INSERT INTO "order_goods"(ORDER_ID, GOODS_ID, GOODS_NAME, GOODS_PRICE, NUMS)
VALUES ($1, $2, $3, $4, $5)
returning id, created_at, updated_at, deleted_at, order_id, goods_id, goods_name, goods_price, nums
`

type CreateOrderGoodsParams struct {
	OrderID    int32   `json:"order_id"`
	GoodsID    int32   `json:"goods_id"`
	GoodsName  string  `json:"goods_name"`
	GoodsPrice float64 `json:"goods_price"`
	Nums       int32   `json:"nums"`
}

func (q *Queries) CreateOrderGoods(ctx context.Context, arg CreateOrderGoodsParams) (OrderGood, error) {
	row := q.db.QueryRowContext(ctx, createOrderGoods,
		arg.OrderID,
		arg.GoodsID,
		arg.GoodsName,
		arg.GoodsPrice,
		arg.Nums,
	)
	var i OrderGood
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.OrderID,
		&i.GoodsID,
		&i.GoodsName,
		&i.GoodsPrice,
		&i.Nums,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :one
UPDATE "shopping_cart"
set deleted_at =$1
where user_id = $2
  and goods_id = $3 and deleted_at IS  NULL
returning id, created_at, updated_at, deleted_at, user_id, goods_id, nums, checked
`

type DeleteCartItemParams struct {
	DeletedAt sql.NullTime `json:"deleted_at"`
	UserID    int32        `json:"user_id"`
	GoodsID   int32        `json:"goods_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, deleteCartItem, arg.DeletedAt, arg.UserID, arg.GoodsID)
	var i ShoppingCart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.GoodsID,
		&i.Nums,
		&i.Checked,
	)
	return i, err
}

const getCartDetailByUIDAndGoodsID = `-- name: GetCartDetailByUIDAndGoodsID :one
SELECT id, created_at, updated_at, deleted_at, user_id, goods_id, nums, checked
FROM "shopping_cart"
where user_id = $1
  and goods_id = $2 and deleted_at IS  NULL
`

type GetCartDetailByUIDAndGoodsIDParams struct {
	UserID  int32 `json:"user_id"`
	GoodsID int32 `json:"goods_id"`
}

func (q *Queries) GetCartDetailByUIDAndGoodsID(ctx context.Context, arg GetCartDetailByUIDAndGoodsIDParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, getCartDetailByUIDAndGoodsID, arg.UserID, arg.GoodsID)
	var i ShoppingCart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.GoodsID,
		&i.Nums,
		&i.Checked,
	)
	return i, err
}

const getCartListByUid = `-- name: GetCartListByUid :many
SELECT id, created_at, updated_at, deleted_at, user_id, goods_id, nums, checked
FROM "shopping_cart"
WHERE user_id = $1
  and deleted_at IS  NULL
`

func (q *Queries) GetCartListByUid(ctx context.Context, userID int32) ([]ShoppingCart, error) {
	rows, err := q.db.QueryContext(ctx, getCartListByUid, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShoppingCart
	for rows.Next() {
		var i ShoppingCart
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.GoodsID,
			&i.Nums,
			&i.Checked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartListChecked = `-- name: GetCartListChecked :many
SELECT id, created_at, updated_at, deleted_at, user_id, goods_id, nums, checked
FROM "shopping_cart"
WHERE user_id = $1 
  and checked = $2 
  and deleted_at IS  NULL
`

type GetCartListCheckedParams struct {
	UserID  int32 `json:"user_id"`
	Checked bool  `json:"checked"`
}

func (q *Queries) GetCartListChecked(ctx context.Context, arg GetCartListCheckedParams) ([]ShoppingCart, error) {
	rows, err := q.db.QueryContext(ctx, getCartListChecked, arg.UserID, arg.Checked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShoppingCart
	for rows.Next() {
		var i ShoppingCart
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.GoodsID,
			&i.Nums,
			&i.Checked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT id, created_at, updated_at, deleted_at, user_id, order_id, pay_type, status, trade_id, order_mount, pay_time, address, signer_name, signer_mobile, post
FROM "order_info"
WHERE user_id = $1
  and order_id = $2 and deleted_at IS  NULL
LIMIT 1
`

type GetOrderDetailParams struct {
	UserID  int32 `json:"user_id"`
	OrderID int32 `json:"order_id"`
}

func (q *Queries) GetOrderDetail(ctx context.Context, arg GetOrderDetailParams) (OrderInfo, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, arg.UserID, arg.OrderID)
	var i OrderInfo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.OrderID,
		&i.PayType,
		&i.Status,
		&i.TradeID,
		&i.OrderMount,
		&i.PayTime,
		&i.Address,
		&i.SignerName,
		&i.SignerMobile,
		&i.Post,
	)
	return i, err
}

const getOrderList = `-- name: GetOrderList :many
SELECT id, created_at, updated_at, deleted_at, user_id, order_id, pay_type, status, trade_id, order_mount, pay_time, address, signer_name, signer_mobile, post
FROM "order_info"
WHERE user_id = $1 and deleted_at IS  NULL
limit $2 offset $3
`

type GetOrderListParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOrderList(ctx context.Context, arg GetOrderListParams) ([]OrderInfo, error) {
	rows, err := q.db.QueryContext(ctx, getOrderList, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderInfo
	for rows.Next() {
		var i OrderInfo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.OrderID,
			&i.PayType,
			&i.Status,
			&i.TradeID,
			&i.OrderMount,
			&i.PayTime,
			&i.Address,
			&i.SignerName,
			&i.SignerMobile,
			&i.Post,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderListByOrderID = `-- name: GetOrderListByOrderID :many
SELECT id, created_at, updated_at, deleted_at, order_id, goods_id, goods_name, goods_price, nums
FROM order_goods
WHERE order_id = $1
  and deleted_at IS  NULL
`

func (q *Queries) GetOrderListByOrderID(ctx context.Context, orderID int32) ([]OrderGood, error) {
	rows, err := q.db.QueryContext(ctx, getOrderListByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderGood
	for rows.Next() {
		var i OrderGood
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.OrderID,
			&i.GoodsID,
			&i.GoodsName,
			&i.GoodsPrice,
			&i.Nums,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE "shopping_cart"
SET updated_at = $1,
    nums       = $2,
    checked    = $3
WHERE user_id = $4
  and goods_id = $5 and deleted_at IS  NULL
returning id, created_at, updated_at, deleted_at, user_id, goods_id, nums, checked
`

type UpdateCartItemParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	Nums      int32     `json:"nums"`
	Checked   bool      `json:"checked"`
	UserID    int32     `json:"user_id"`
	GoodsID   int32     `json:"goods_id"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, updateCartItem,
		arg.UpdatedAt,
		arg.Nums,
		arg.Checked,
		arg.UserID,
		arg.GoodsID,
	)
	var i ShoppingCart
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.GoodsID,
		&i.Nums,
		&i.Checked,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
update "order_info"
set updated_at = $1,
    pay_type   = $2,
    pay_time   = $3,
    status     = $4
where order_id = $5 and deleted_at IS  NULL
returning id, created_at, updated_at, deleted_at, user_id, order_id, pay_type, status, trade_id, order_mount, pay_time, address, signer_name, signer_mobile, post
`

type UpdateOrderParams struct {
	UpdatedAt time.Time      `json:"updated_at"`
	PayType   sql.NullString `json:"pay_type"`
	PayTime   sql.NullTime   `json:"pay_time"`
	Status    int64          `json:"status"`
	OrderID   int32          `json:"order_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (OrderInfo, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.UpdatedAt,
		arg.PayType,
		arg.PayTime,
		arg.Status,
		arg.OrderID,
	)
	var i OrderInfo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.OrderID,
		&i.PayType,
		&i.Status,
		&i.TradeID,
		&i.OrderMount,
		&i.PayTime,
		&i.Address,
		&i.SignerName,
		&i.SignerMobile,
		&i.Post,
	)
	return i, err
}
