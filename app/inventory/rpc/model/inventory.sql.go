// Code generated by sqlc. DO NOT EDIT.
// source: inventory.sql

package model

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createInventory = `-- name: CreateInventory :one
INSERT INTO "inventory"(goods_id,
                        sticks,
                        version)
VALUES ($1, $2, $3)
returning id, created_at, updated_at, deleted_at, goods_id, sticks, version
`

type CreateInventoryParams struct {
	GoodsID int32 `json:"goods_id"`
	Sticks  int32 `json:"sticks"`
	Version int32 `json:"version"`
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, createInventory, arg.GoodsID, arg.Sticks, arg.Version)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GoodsID,
		&i.Sticks,
		&i.Version,
	)
	return i, err
}

const createSellDetail = `-- name: CreateSellDetail :one
INSERT INTO "stock_sell_detail"(order_id,
                                status, detail)
values ($1, $2, $3::goodsdetail[])
returning order_id, status, detail
`

type CreateSellDetailParams struct {
	OrderID int64         `json:"order_id"`
	Status  int16         `json:"status"`
	Detail  []GoodsDetail `json:"detail"`
}

func (q *Queries) CreateSellDetail(ctx context.Context, arg CreateSellDetailParams) (StockSellDetail, error) {
	row := q.db.QueryRowContext(ctx, createSellDetail, arg.OrderID, arg.Status, pq.Array(arg.Detail))
	var i StockSellDetail
	err := row.Scan(&i.OrderID, &i.Status, pq.Array(&i.Detail))
	return i, err
}

const getInventoryByGoodsID = `-- name: GetInventoryByGoodsID :one
SELECT id, created_at, updated_at, deleted_at, goods_id, sticks, version
FROM "inventory"
WHERE goods_id = $1
LIMIT 1
`

func (q *Queries) GetInventoryByGoodsID(ctx context.Context, goodsID int32) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, getInventoryByGoodsID, goodsID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GoodsID,
		&i.Sticks,
		&i.Version,
	)
	return i, err
}

const updateInventory = `-- name: UpdateInventory :one
update "inventory"
set updated_at = $1,
    sticks     = sticks + $3
where goods_id = $2
returning id, created_at, updated_at, deleted_at, goods_id, sticks, version
`

type UpdateInventoryParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	GoodsID   int32     `json:"goods_id"`
	Counts    int32     `json:"counts"`
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, updateInventory, arg.UpdatedAt, arg.GoodsID, arg.Counts)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GoodsID,
		&i.Sticks,
		&i.Version,
	)
	return i, err
}
